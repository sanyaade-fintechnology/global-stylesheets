//-------------------------------------
// Default form list styles
//-------------------------------------

.form-list {
  padding: 0;
  margin: 0;
  list-style: none;

  & > li {
    @extend %margin-bottom-small;
    position: relative;
    padding-left: 0;

    &:before { content: "" }
  }

  label {
    @include transition(color .2s);
    display: block;
    margin-bottom: 1px;
    font: {
      size: em(10, 14);
      weight: 400;
    };
    text-transform: uppercase;
    color: $colorDarkGrey;
  }

  .active label { color: $colorCorpHighlight }

  .checkboxes input {
    float: left;
    margin-right: .5em;
    margin-top: .15em;
  }

  input[type="text"],
  input[type="email"],
  input[type="password"],
  input[type="tel"],
  textarea {
    @include transition (border-color .2s);
    @include placeholder { color: $colorLightGrey };
    outline: none;
    background-color: white;
    width: 100%;
    border: 1px solid;
    border-color: $colorLightGrey;
    border-radius: $layoutCornerRadius;
    padding: 0.8em 1em;

    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;

    &:focus,
    &:hover { border-color: $colorCorpHighlight }
  }

  textarea { min-height: 200px }

  // smaller form inputs
  &.small {
    input[type="text"],
    input[type="email"],
    input[type="password"],
    input[type="tel"],
    textarea {
      padding: .4em .5em;
    }
  }

  // hinting labels
  &.hinting-labels {
    label.hint {
      border-top-left-radius: $layoutCornerRadius;
      border-top-right-radius: $layoutCornerRadius;
      background-color: $colorCorpHighlight;
      box-shadow: 0 -2px 0 rgba($colorCorpHighlight, .2);
      padding: em(3) 1em;
      display: none;
      position: absolute;
      top: -20px;
      color: $colorOffWhite;
      z-index: 1;

      @include media($breakTabletPortrait) {
        top: -25px;
      }
    }

    li { z-index: 3 }

    li, input { position: relative }

    input { z-index: 2 }

    input:focus ~ label {
      @include animation(fadeInUp .2s 0s backwards);
      display: block;
    }
  }
}

//-------------------------------------
// Button group
//-------------------------------------

.button-set {
  @include clearfix;
  margin-top: em(30);

  p { margin-top: 0 }

  &.right .button {
    float: right;
    margin-left: em(20)
  }
}

//-------------------------------------
// Input errors and validation
//-------------------------------------

input[type="text"],
input[type="email"],
input[type="password"],
input[type="tel"],
select {
  &.parsley-success,
  &.ng-valid.ng-dirty {
    border-color: $colorSuccess;
  }

  &.parsley-error,
  &.ng-invalid.ng-dirty {
    border-color: $colorError;
  }
}

/**
 * Styled error messages
 * should look like this:
 * 
 * <ul class="validation-list">
 *  <li>Error</li>
 * </ul>
 */

.parsley-errors-list,
.validation-list {
  @extend .unstyled;
  font-size: em(12);

  li {
    @include border-bottom-radius($layoutCornerRadius);
    position: relative;
    top: -1px;
    line-height: 1;
    border-left: 1px solid $colorError;
    border-bottom: 1px solid $colorError;
    border-right: 1px solid $colorError;
    background: lighten($colorError, 20%);
    color: $colorOffWhite;
    padding: 0.3125em !important;
  }
}

/**
 * @extend this when validating checkboxes
 * and radio buttons, or when applying validation
 * errors not bound to any specific input
 */

.detach {
  &.parsley-errors-list {
    li {
      @extend %margin-bottom-medium;
      @extend %margin-top-small;
      @include border-top-radius($layoutCornerRadius);
      border-top: 1px solid $colorError;
    }
  }

  &.validation-list {
    li {
      @include border-top-radius($layoutCornerRadius);
      border-top: 1px solid $colorError;
      color: darken($colorError, 40%);
    }

    p { margin: .5em 1em }
  }
}

//-------------------------------------
// Custom radio buttons & checkboxes
// Note: Wrap inputs and labels in .custom
//-------------------------------------

.custom {

  label {
    display: inline-block;
    cursor: pointer;
    position: relative;
    padding-left: 25px;
    padding-right: 15px;
    margin-right: 15px;

    &:before {
      content: "";
      display: inline-block;
      width: 16px;
      height: 16px;
      margin-right: 10px;
      position: absolute;
      left: 0;
      top: 2px;
      border: 1px solid $colorLightGrey;
      background-color: white;
    }
  }

  input[type="radio"], input[type="checkbox"] { display: none; }

  input[type="radio"] + label:before { border-radius: 9px; }

  input[type="checkbox"] + label:before { border-radius: $layoutCornerRadius }

  /* Ticked styles */
  input:checked + label:after {
    display: inline-block;
    width: 8px;
    height: 8px;
    position: absolute;
  }

  input[type="radio"]:checked + label:after {
    content: '';
    border-radius: 4px;
    top: 7px;
    left: 5px;
    background: white;
  }

  input[type="checkbox"]:checked + label:after {
    content: '\e617';
    font-family: 'sumup-icons';
    font-size: 20px;
    font-weight: normal;
    line-height: 0;
    border-radius: 2px;
    top: 8px;
    left: 1px;
    color: $colorCorpHighlight;
  }

  /* Disabled styles */
  &.disabled {
    label {
      color: lighten($colorMediumGrey, 25%);

      &:before {
        background: lighten($colorMediumGrey, 25%);
      }
    }
  }

  /*
  * Custom drop-downs need a .select
  * wrapper to support pseudo-elements
  * e.g.:
  * <li class="custom select">
  *   <select></select>
  * </li>
  */
  &.select {
    position: relative;

    &:after {
      content: 'â–´';
      @include size(1em);
      @include transform(rotate(180deg));
      @include transition;
      display: block;
      position: absolute;
      right: 1em;
      top: .9em;
      color: $colorMediumGrey;
    }

    select {
      @include appearance(none);
      width: 100%;
      background: none;
      border: 1px solid $colorBorderLight;
      border-radius: $layoutCornerRadius;
      padding: 7px 15px;
      white-space: nowrap;
      cursor: pointer;

      &:active {
        &:after {
          @include transform(rotate(0deg));
          @include transition;
        }
      }
    }
  }
}
